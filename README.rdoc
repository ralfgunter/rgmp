=rGMP

rGMP is another Ruby wrapper for the <b>GNU Multiple Precision</b> library, which is a very fast math library written in C, C++ and assembly. When MPFR, the <b>Multi-Precision Floating Point Reliable</b> library, is present, it also inherits its methods, complementing the Float class defined under GMP::Float.

One of the main goals is to effectively replace all of Bignum/Numeric in terms of functionality and then surpass them, giving Ruby that extra oomph it needs to work with math-heavy projects (such as in scientific computing). To achieve this, rGMP will implement all applicable methods from the GMP and MPFR libraries, with both regular (fast, very ruby-like) and in-place (faster, avoids some object creating) methods. Also, it aims to be fully compatible with the current Bignum class, making it an easier transition for those whose projects demand a lot of performance but are in an advanced stage of development.

It does not mean, however, that it IS in fact a drop-in replacement, since the usual way of doing things might be inefficient some times - regular vs. in-place methods for one - therefore proper documentation is a must as well. In spite of that, the speed-up given by GMP for reasonably sized numbers is such that it may obfuscate the bottleneck that is the ruby-to-c/c-to-ruby converting voodoo that takes place in almost all methods.

For more information about GMP, please visit http://gmplib.org
If you want to learn more about MPFR, its website can be found at http://mpfr.org

=License

This project is licensed under the GPL v3 and later, but I'm pondering whether or not to use LGPL as well.

=Notes

Currently, this is a hobby project to help me learn C, Ruby, and GMP/MPFR, which shows in the quality of the code!

Please do take note that this is my first public project, and my experience with C is less than two or three months old, with Ruby being of a couple of months more. This means that it is almost certain that there are vast amounts of memory leaks, buffer overflows, general code untidiness, inaccurate/outrageously wrong comments and inefficient constructions, to say the least!

Thus, I believe it should not yet be used in production environments, unless you want to amuse yourself and your colleagues :).

Nonetheless, the performance is already quite impressive compared to Ruby's native Bignum in certain points. I'll post benchmark units when the integer code is more or less feature-complete.

Also, as this extension may use MPFR as well (given that it's present at compile-time), some name changing is very likely to happen soon.

=Bug reporting and criticism/suggestions/comments

This is my personal plea to you: if you do happen to use this software and find any bugs (there will be many), I would be VERY happy if you could shoot me a message about it!

In fact, as stated earlier, I'm still new to this stuff, and would be eternally grateful for any criticism/comments on the overall quality of the code, as well as suggestions as to what features of C/Ruby I'm leaving out which could enhance the code's performance/accuracy/cleanliness!
